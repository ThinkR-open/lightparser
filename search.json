[{"path":[]},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement coc@thinkr.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ‘lightparser’","title":"Contributing to ‘lightparser’","text":"outlines propose change ‘lightparser’.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"use-of-fusen-to-build-the-code-base-and-documentation","dir":"","previous_headings":"","what":"Use of ‘fusen’ to build the code base and documentation","title":"Contributing to ‘lightparser’","text":"Package ‘fusen’ used build code base documentation ‘lightparser’. ‘fusen’ package provides framework building R packages Rmarkdown file (Quarto file). See documentation ‘fusen’ details: https://thinkr-open.github.io/fusen","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"some-tips-to-contribute-with-fusen","dir":"","previous_headings":"","what":"Some tips to contribute with ‘fusen’","title":"Contributing to ‘lightparser’","text":"modifications can realized modifying ‘flat’ file “dev/” directory. , run fusen::inflate_all() generate corresponding R, test vignette files. can see list active flat files corresponding generated files opening “dev/config_fusen.yaml” file. one section flat file. see text like \"# WARNING - Generated 'fusen' dev/flat_***.Rmd: edit hand\" top generated R, test vignette files, actually generated ‘fusen’. file, generated ‘fusen’, listed \"keep\" section “dev/config_fusen.yaml” file. can run fusen::check_not_registered_files() check ’s case.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"modify-documentation","dir":"","previous_headings":"Some tips to contribute with ‘fusen’","what":"Modify documentation","title":"Contributing to ‘lightparser’","text":"find roxygen skeleton corresponding function chunk Text vignette generally text chunk flat file","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"modify-of-a-function","dir":"","previous_headings":"Some tips to contribute with ‘fusen’","what":"Modify of a function","title":"Contributing to ‘lightparser’","text":"recommend test driven development approach: Write modify unit test corresponding test chunk function Modify code function corresponding function chunk Run ‘inflate’ command bottom flat file Run devtools::test() check test passing avoid multiple inflates, can run code locally Instead inflating, run fusen::load_flat_functions() load function current flat file global environment Run tests line line test chunk can also use favorite debuging tools","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"what-if-i-do-not-understand-fusen-","dir":"","previous_headings":"","what":"What if I do not understand ‘fusen’ ?","title":"Contributing to ‘lightparser’","text":"help. know modify package without ‘fusen’, contribute normally. Forget flat files moment. ‘fusen’ package still classical package remove “dev/” directory. difference. Open Pull Request help integrate contribution ‘fusen’ framework.","code":""},{"path":"https://thinkr-open.github.io/lightparser/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ‘lightparser’","text":"Please note ‘lightparser’ project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://thinkr-open.github.io/lightparser/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ThinkR Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://thinkr-open.github.io/lightparser/articles/z-split-a-rmd-or-qmd-file-into-a-tibble-and-vice-versa.html","id":"parse-and-split-a-rmd-qmd-file-and-transform-as-tibble","dir":"Articles","previous_headings":"","what":"Parse and split a Rmd / Qmd file, and transform as tibble","title":"Split a Rmd or Qmd file into a tibble and vice-versa","text":"{lightparser} reads flat file detect yaml header, code chunk options, text part. Function split_to_tbl() returns tibble parts.","code":"file <- system.file(   \"dev-template-parsing.Rmd\",   package = \"lightparser\" ) split_to_tbl(file) #> It seems you are currently knitting a Rmd/Qmd file. The parsing of the file will be done in a new R session. #> # A tibble: 35 × 8 #>    type    label       params       text     code  heading heading_level section #>    <chr>   <chr>       <list>       <named > <lis> <chr>           <dbl> <chr>   #>  1 yaml    NA          <named list> <lgl>    <lgl> NA                 NA NA      #>  2 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA NA      #>  3 block   development <named list> <lgl>    <chr> NA                 NA NA      #>  4 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA NA      #>  5 heading NA          <lgl [1]>    <chr>    <lgl> Descri…             1 Descri… #>  6 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Descri… #>  7 block   description <named list> <lgl>    <chr> NA                 NA Descri… #>  8 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Descri… #>  9 heading NA          <lgl [1]>    <chr>    <lgl> Read d…             1 Read d… #> 10 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Read d… #> # ℹ 25 more rows"},{"path":"https://thinkr-open.github.io/lightparser/articles/z-split-a-rmd-or-qmd-file-into-a-tibble-and-vice-versa.html","id":"combine-a-parsed-tbl-rmd-qmd-file-into-a-new-file","dir":"Articles","previous_headings":"","what":"Combine a parsed tbl Rmd / Qmd file into a new file","title":"Split a Rmd or Qmd file into a tibble and vice-versa","text":"can re-create Rmd/Qmd file tibble returned split_to_tbl(). tibble, combining new file, can modify content removing adding rows, replacing content, etc.","code":"file <- system.file(\"dev-template-parsing.Rmd\",   package = \"lightparser\" ) # split first tbl_rmd <- split_to_tbl(file) #> It seems you are currently knitting a Rmd/Qmd file. The parsing of the file will be done in a new R session. # apply your filters tbl_rmd_filtered <- tbl_rmd[-5, ] # combine then combine_tbl_to_file(tbl_rmd_filtered, tempfile(fileext = \".Rmd\"))"},{"path":"https://thinkr-open.github.io/lightparser/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastien Rochette. Author, maintainer. ThinkR. Copyright holder.","code":""},{"path":"https://thinkr-open.github.io/lightparser/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rochette S (2024). lightparser: 'Rmarkdown' 'Quarto' Files Tibble Back. R package version 0.1.0,  https://thinkr-open.github.io/lightparser/, https://github.com/ThinkR-open/lightparser.","code":"@Manual{,   title = {lightparser: From 'Rmarkdown' and 'Quarto' Files to Tibble and Back},   author = {Sebastien Rochette},   year = {2024},   note = {R package version 0.1.0,  https://thinkr-open.github.io/lightparser/},   url = {https://github.com/ThinkR-open/lightparser}, }"},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"lightparser","dir":"","previous_headings":"","what":"From Rmarkdown and Quarto Files to Tibble and Back","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"need extract specific information Rmd Qmd file? {lightparser} designed split Rmd Qmd file sections tibble: titles, text, chunks. stores tibble, can easily manipulate {dplyr} {purrr}. Later, can rebuild Rmd Qmd tibble.","code":""},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"can install development version lightparser GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ThinkR-open/lightparser\")"},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"Full documentation website : https://thinkr-open.github.io/lightparser/","code":""},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"Split Rmd Qmd file tibble: Combine tibble Rmd Qmd file: Read file re-created combine_tbl_to_file() verify proper Rmd","code":"library(lightparser)  file <- system.file(   \"dev-template-parsing.Rmd\",   package = \"lightparser\" )   tbl_rmd <- split_to_tbl(file) tbl_rmd #> # A tibble: 35 × 8 #>    type    label       params       text     code  heading heading_level section #>    <chr>   <chr>       <list>       <named > <lis> <chr>           <dbl> <chr>   #>  1 yaml    <NA>        <named list> <lgl>    <lgl> <NA>               NA <NA>    #>  2 inline  <NA>        <lgl [1]>    <chr>    <lgl> <NA>               NA <NA>    #>  3 block   development <named list> <lgl>    <chr> <NA>               NA <NA>    #>  4 inline  <NA>        <lgl [1]>    <chr>    <lgl> <NA>               NA <NA>    #>  5 heading <NA>        <lgl [1]>    <chr>    <lgl> Descri…             1 Descri… #>  6 inline  <NA>        <lgl [1]>    <chr>    <lgl> <NA>               NA Descri… #>  7 block   description <named list> <lgl>    <chr> <NA>               NA Descri… #>  8 inline  <NA>        <lgl [1]>    <chr>    <lgl> <NA>               NA Descri… #>  9 heading <NA>        <lgl [1]>    <chr>    <lgl> Read d…             1 Read d… #> 10 inline  <NA>        <lgl [1]>    <chr>    <lgl> <NA>               NA Read d… #> # ℹ 25 more rows file_out <- tempfile(fileext = \".Rmd\") out <- combine_tbl_to_file(tbl_rmd, file_out) cat(readLines(file_out), sep = \"\\n\") #> --- #> title: dev_history.Rmd for working package #> output: html_document #> author: statnmap #> date: '2023-10-12' #> editor_options: #>   chunk_output_type: console #> --- #>  #>  #> ```{r development} #> #| include: no #>  #> library(testthat) #> ``` #>  #>  #> <!-- #> # Description of your package #>  #> This will fill the description of your package. #> --> #> ```{r description} #> # --> for parse tests #> fusen::fill_description( #>     pkg = here::here(), #>     fields = list( #>         Title = \"Build A Package From Rmarkdown file\", #>         Description = \"Use Rmarkdown First method to build your package. Start your package with documentation. Everything can be set from a Rmarkdown file in your project.\", #>         `Authors@R` = c( #>             person(\"John\", \"Doe\", email = \"john@email.me\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0000-0000-0000\")) #>         ) #>     ) #> ) #> # Define License with use_*_license() #> usethis::use_mit_license(\"John Doe\") #> ``` #>  #>  #> # Read data #>  #> <!-- Store your dataset in a directory named \"inst/\" at the root of your project --> #> <!-- Use it for your tests in this Rmd thanks to `load_all()` to make it available #> and `system.file()` to read it in your examples  #> --> #> ```{r development-2} #> # Set error=TRUE for checks() if needed #> # Run all in the console directly #> # Create \"inst/\" directory #> dir.create(here::here(\"inst\")) #> # Example dataset #> file.copy(system.file(\"nyc_squirrels_sample.csv\", package = \"fusen\"), here::here(\"inst\")) #> ``` #>  #>  #> # Calculate the median of a vector #>  #> Here is some inline R code : `r 1+1` #> ```{r function} #> #' My median #> #' #> #' @param x Vector of Numeric values #> #' @inheritParams stats::median #> #' #> #' @return #> #' Median of vector x #> #' @export #> #' #> #' @examples #> #' my_median(2:20) #> my_median <- function(x, na.rm = TRUE) { #>     if (!is.numeric(x)) { #>         stop(\"x should be numeric\") #>     } #>     stats::median(x, na.rm = na.rm) #> } #> ``` #>  #>  #> ```{r examples} #> my_median(1:12) #> ``` #>  #>  #> ```{r tests} #> test_that(\"my_median works properly and show error if needed\", { #>     expect_error(my_median(\"text\")) #> }) #> ``` #>  #>  #> # Calculate the mean of a vector #> ## Use sub-functions in the same chunk #> ```{r function-1} #> #| filename: the_median_file #>  #> #' My Other median #> #' #> #' @param x Vector of Numeric values #> #' @inheritParams stats::median #> #' #> #' @return #> #' Median of vector x #> #' @export #> #' #> #' @examples #> my_other_median <- function(x, na.rm = TRUE) { #>     if (!is.numeric(x)) { #>         stop(\"x should be numeric\") #>     } #>     sub_median(x, na.rm = na.rm) #> } #>  #> #' Core of the median not exported #> #' @param x Vector of Numeric values #> #' @inheritParams stats::median #> sub_median <- function(x, na.rm = TRUE) { #>     stats::median(x, na.rm) #> } #> ``` #>  #>  #> ```{r examples-1} #> my_other_median(1:12) #> my_other_median(8:20) #> my_other_median(20:50) #> ``` #>  #>  #> ```{r tests-1} #> test_that(\"my_median works properly and show error if needed\", { #>     expect_true(my_other_median(1:12) == 6.5) #>     expect_error(my_other_median(\"text\")) #> }) #> ``` #>  #>  #> ``` #> not a R chunk that should be kept in vignette, but not in code #> ``` #>  #> ```{r development-1} #> #| eval: no #>  #> # Run but keep eval=FALSE to avoid infinite loop #> # Execute in the console directly #> fusen::inflate(flat_file = \"dev/dev_history.Rmd\") #> ``` #>  #>  #>  #> # Inflate your package #> ```{r} #> # duplicate empty name #> ``` #>  #>  #> ```{r} #> # duplicate empty name #> ``` #>  #>  #>  #> You're one inflate from paper to box. #> Build your package from this very Rmd using `fusen::inflate()` #>  #> - Verify your `\"DESCRIPTION\"` file has been updated #> - Verify your function is in `\"R/\"` directory #> - Verify your test is in `\"tests/testthat/\"` directory #> - Verify this Rmd appears in `\"vignettes/\"` directory"},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"similar-work","dir":"","previous_headings":"","what":"Similar work","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"{lightparser} light version {parsermd} updated long time, compatible latest versions C++ compilers. {lightparser} rely C++ compilation.","code":""},{"path":"https://thinkr-open.github.io/lightparser/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"From Rmarkdown and Quarto Files to Tibble and Back","text":"Please note lightparser project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/combine_tbl_to_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","title":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","text":"Combine parsed tbl Rmd / Qmd file new file","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/combine_tbl_to_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","text":"","code":"combine_tbl_to_file(parsed_tbl, output_file)"},{"path":"https://thinkr-open.github.io/lightparser/reference/combine_tbl_to_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","text":"parsed_tbl tibble columns issued split_to_tbl() output_file Rmd / Qmd file path write new content","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/combine_tbl_to_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","text":"content Rmd / Qmd file character resulting file output_file provided.","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/combine_tbl_to_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a parsed tbl Rmd / Qmd file into a new file — combine_tbl_to_file","text":"","code":"file <- system.file(\"dev-template-parsing.Rmd\",   package = \"lightparser\" ) # split first tbl_rmd <- split_to_tbl(file) # apply your filters tbl_rmd_filtered <- tbl_rmd[-5, ] # combine then combine_tbl_to_file(tbl_rmd_filtered, tempfile(fileext = \".Rmd\"))"},{"path":"https://thinkr-open.github.io/lightparser/reference/lightparser-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lightparser: From 'Rmarkdown' and 'Quarto' Files to Tibble and Back — lightparser-package","title":"lightparser: From 'Rmarkdown' and 'Quarto' Files to Tibble and Back — lightparser-package","text":"Split 'rmarkdown' 'quarto' files sections tibble: titles, text, chunks. Rebuild file tibble.","code":""},{"path":[]},{"path":"https://thinkr-open.github.io/lightparser/reference/lightparser-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lightparser: From 'Rmarkdown' and 'Quarto' Files to Tibble and Back — lightparser-package","text":"Maintainer: Sebastien Rochette sebastien@thinkr.fr (ORCID) contributors: ThinkR [copyright holder]","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/split_to_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","title":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","text":"Group lines Rmd Qmd file types tibble","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/split_to_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","text":"","code":"split_to_tbl(file)"},{"path":"https://thinkr-open.github.io/lightparser/reference/split_to_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","text":"file Rmd Qmd file path","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/split_to_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","text":"tibble 6 columns: type: type part (yaml, heading, inline, block) label: label part () params: parameters part () text: text part () code: code part () heading: heading part () heading_level: level heading () section: section Rmd file, according headings ()","code":""},{"path":"https://thinkr-open.github.io/lightparser/reference/split_to_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group lines of a Rmd or Qmd file by types in a tibble — split_to_tbl","text":"","code":"file <- system.file(   \"dev-template-parsing.Rmd\",   package = \"lightparser\" ) split_to_tbl(file) #> # A tibble: 35 × 8 #>    type    label       params       text     code  heading heading_level section #>    <chr>   <chr>       <list>       <named > <lis> <chr>           <dbl> <chr>   #>  1 yaml    NA          <named list> <lgl>    <lgl> NA                 NA NA      #>  2 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA NA      #>  3 block   development <named list> <lgl>    <chr> NA                 NA NA      #>  4 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA NA      #>  5 heading NA          <lgl [1]>    <chr>    <lgl> Descri…             1 Descri… #>  6 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Descri… #>  7 block   description <named list> <lgl>    <chr> NA                 NA Descri… #>  8 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Descri… #>  9 heading NA          <lgl [1]>    <chr>    <lgl> Read d…             1 Read d… #> 10 inline  NA          <lgl [1]>    <chr>    <lgl> NA                 NA Read d… #> # ℹ 25 more rows"},{"path":"https://thinkr-open.github.io/lightparser/news/index.html","id":"lightparser-010","dir":"Changelog","previous_headings":"","what":"lightparser 0.1.0","title":"lightparser 0.1.0","text":"CRAN release: 2024-01-24 Initial CRAN submission.","code":""},{"path":"https://thinkr-open.github.io/lightparser/news/index.html","id":"lightparser-001","dir":"Changelog","previous_headings":"","what":"lightparser 0.0.1","title":"lightparser 0.0.1","text":"split_to_tbl() split Rmd / Qmd tibble. combine_tbl_to_file() combine tibble Rmd / Qmd.","code":""}]
